const std = @import("std");
const microzig = @import("microzig");

const rp2040 = microzig.hal;
const i2c = rp2040.i2c;
const gpio = rp2040.gpio;
const time = rp2040.time;

const i2c0 = i2c.num(0);
const led = gpio.num(25);

const ADDRESS: u8 = 0x3C;
const CONTROL_COMMAND: u8 = 0x00;
const CONTROL_DATA: u8 = 0x40;
const COMMAND_ADDRESSING_MODE = 0x20;
const COMMAND_COLUMN_ADDRESS = 0x21;
const COMMAND_PAGE_ADDRESS = 0x22;

const INIT = [_]u8{ CONTROL_COMMAND, 0xAE, CONTROL_COMMAND, 0xA8, 0x1F, CONTROL_COMMAND, 0xD3, 0x00, CONTROL_COMMAND, 0x40, CONTROL_COMMAND, 0xA0, CONTROL_COMMAND, 0xC0, CONTROL_COMMAND, 0xDA, 0x02, CONTROL_COMMAND, 0x81, 0x7F, CONTROL_COMMAND, 0xA4, CONTROL_COMMAND, 0xD5, 0x80, CONTROL_COMMAND, 0x8D, 0x14, CONTROL_COMMAND, 0xAF };

const DRAW = [_]u8{
    CONTROL_COMMAND,
    COMMAND_COLUMN_ADDRESS,
    0x00,
    0x7F,
    CONTROL_COMMAND,
    COMMAND_PAGE_ADDRESS,
    0x00,
    0x03,
};

pub fn main() !void {
    led.set_function(.sio);
    led.set_direction(.out);
    led.put(0);

    _ = i2c0.apply(.{
        .clock_config = rp2040.clock_config,
        .scl_pin = gpio.num(21),
        .sda_pin = gpio.num(20),
        .baud_rate = 400000,
    });

    time.sleep_ms(1000);

    try initialise();
    var buff = [512]u8{ 0xad, 0x52, 0xed, 0x1b, 0xe6, 0x59, 0xa6, 0x5b, 0xb4, 0x4b, 0xb6, 0x49, 0xb6, 0x4b, 0xb4, 0x6b, 0x94, 0x6b, 0x94, 0x6b, 0x94, 0x6b, 0x94, 0x6b, 0x94, 0x6b, 0x94, 0x6b, 0x94, 0x2b, 0xd4, 0x2b, 0xc4, 0x3b, 0xc4, 0x2b, 0xd4, 0x2b, 0x54, 0xab, 0x54, 0xa3, 0x5c, 0xa3, 0x54, 0xab, 0x54, 0xab, 0x14, 0xe3, 0x1c, 0xe3, 0x14, 0x6b, 0x94, 0x2b, 0xd4, 0x23, 0xdc, 0x23, 0xd4, 0x2b, 0xd4, 0x23, 0xdc, 0x23, 0xd4, 0x2b, 0x54, 0xab, 0x54, 0xa3, 0x5c, 0xa3, 0x54, 0xab, 0x54, 0x2b, 0xd4, 0x23, 0xdc, 0x23, 0xd4, 0x2b, 0xd4, 0x2b, 0xd4, 0x0b, 0xf4, 0x0b, 0xf4, 0x0b, 0xd4, 0x2b, 0xd4, 0x2b, 0xd4, 0x2b, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x54, 0xab, 0x6e, 0x93, 0x6c, 0x93, 0x6c, 0xd3, 0x2c, 0xdb, 0xa4, 0x5b, 0xe6, 0x99, 0x66, 0xd9, 0x26, 0xb9, 0x36, 0x79, 0x96, 0x39, 0xbe, 0x29, 0x9e, 0x3d, 0x96, 0x2d, 0x56, 0x1d, 0x82, 0x2f, 0x52, 0x25, 0x1e, 0x29, 0x16, 0x8d, 0x22, 0x4d, 0x12, 0x45, 0x0a, 0xa2, 0x05, 0x28, 0x17, 0xa8, 0x05, 0x54, 0x0d, 0x92, 0x0d, 0x34, 0xa5, 0x0f, 0x30, 0x27, 0x94, 0x27, 0x08, 0x47, 0x10, 0x83, 0x4a, 0x02, 0x25, 0x82, 0x25, 0x02, 0x97, 0x04, 0x13, 0xa6, 0x0a, 0xa5, 0x2e, 0x92, 0x2f, 0x92, 0x2d, 0x16, 0x6b, 0x04, 0x3f, 0x42, 0x3d, 0x86, 0x35, 0x96, 0x2d, 0x94, 0x2d, 0x40, 0x15, 0x80, 0x55, 0x24, 0x45, 0x54, 0x65, 0x94, 0x6d, 0x54, 0x6d, 0x54, 0x6d, 0x94, 0x6d, 0x56, 0x6d, 0x92, 0x6f, 0x54, 0xaf, 0x52, 0x2d, 0x42, 0x97, 0x20, 0xcf, 0x10, 0xaf, 0x50, 0xaf, 0x58, 0xa7, 0x58, 0xa7, 0x58, 0x5d, 0xa2, 0xff, 0x00, 0xff, 0x44, 0xb3, 0xca, 0x23, 0xcb, 0xa4, 0x41, 0xa8, 0x41, 0xc4, 0x29, 0xe0, 0x89, 0xa0, 0x89, 0x08, 0xe2, 0x0b, 0x12, 0x8a, 0x03, 0x10, 0x03, 0x10, 0x02, 0x80, 0x12, 0x01, 0x88, 0x00, 0x04, 0x00, 0x21, 0x00, 0x01, 0x20, 0x00, 0x11, 0x00, 0x01, 0x08, 0x40, 0x01, 0xa4, 0x80, 0x81, 0xa4, 0x80, 0x85, 0x60, 0x01, 0x84, 0x40, 0x01, 0x08, 0x01, 0x04, 0x00, 0x21, 0x00, 0x20, 0x00, 0x00, 0x24, 0x00, 0x00, 0x20, 0x08, 0x00, 0x20, 0x01, 0x08, 0x00, 0x21, 0x01, 0x10, 0x01, 0x41, 0x11, 0x00, 0x21, 0x00, 0x11, 0x00, 0x41, 0x10, 0x01, 0x08, 0x40, 0x00, 0x21, 0x00, 0x01, 0x40, 0x00, 0x84, 0x20, 0xc0, 0xa0, 0x84, 0xa0, 0x80, 0x60, 0x00, 0x00, 0x40, 0x08, 0x80, 0x04, 0x00, 0x02, 0x20, 0x80, 0x80, 0xa4, 0x40, 0xc0, 0x95, 0x72, 0xcd, 0x33, 0xec, 0x53, 0xab, 0x5e, 0xf5, 0x3f, 0xea, 0x5f, 0xba, 0xed, 0x5b, 0xbe, 0xeb, 0x3e, 0xe9, 0x5f, 0xba, 0xeb, 0x3e, 0xe9, 0x5e, 0xbb, 0x6a, 0xdb, 0xba, 0x6e, 0xb8, 0x6c, 0xbc, 0xa8, 0x7c, 0xa8, 0x7c, 0xa8, 0xdc, 0xb8, 0x68, 0xdc, 0xb8, 0x5a, 0xfa, 0x9a, 0x7a, 0xda, 0xbb, 0x68, 0xdc, 0x79, 0xd8, 0x39, 0xea, 0xba, 0x59, 0xfa, 0x59, 0xfa, 0x58, 0xb9, 0xdc, 0x78, 0xda, 0xba, 0x5a, 0xfa, 0x5a, 0xbb, 0xd9, 0x7b, 0xd9, 0xbb, 0x59, 0xfb, 0x5a, 0xba, 0xdb, 0x7a, 0xda, 0xbb, 0x58, 0xf9, 0x58, 0xb9, 0xd8, 0x79, 0xd8, 0xb8, 0x58, 0xf9, 0x58, 0xf8, 0x5a, 0xfa, 0x5a, 0xfa, 0x5a, 0xfa, 0x5a, 0xfa, 0x58, 0xbd, 0xd8, 0xf8, 0xac, 0x79, 0xda, 0x7b, 0xda, 0x7b, 0xda, 0x79, 0xdd, 0x78, 0xde, 0x7a, 0xdd, 0x7b, 0xde, 0x7a, 0xde, 0xf6, 0xbd, 0xde, 0x7b, 0xbe, 0xed, 0xbe, 0x77, 0xfd, 0x5e, 0xff };

    for (buff) |b| {
        try send(&[2]u8{ CONTROL_DATA, b });
    }
}

pub fn send(bytes: []const u8) !void {
    const a: i2c.Address = @enumFromInt(ADDRESS);
    _ = i2c0.write_blocking(a, bytes) catch {
        led.put(1);
    };
}

pub fn initialise() !void {
    try send(&INIT);

    time.sleep_ms(1000);
    led.put(1);
    time.sleep_ms(1000);
    led.put(0);

    const set_addressing_mode = [3]u8{ CONTROL_COMMAND, COMMAND_ADDRESSING_MODE, 0b00 };
    try send(&set_addressing_mode);
    try send(&DRAW);
    try clear();
}

pub fn clear() !void {
    var page_buffer: [512]u8 = undefined;
    @memset(&page_buffer, 0x0);
    for (page_buffer) |b| {
        try send(&[2]u8{ CONTROL_DATA, b });
    }
}
